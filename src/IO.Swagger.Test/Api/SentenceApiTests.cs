/* 
 * Fabulator API
 *
 * Endpoint Fabulator project
 *
 * OpenAPI spec version: 1.0.0
 * Contact: torloneg@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing SentenceApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class SentenceApiTests
    {
        private SentenceApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new SentenceApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of SentenceApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' SentenceApi
            //Assert.IsInstanceOfType(typeof(SentenceApi), instance, "instance is a SentenceApi");
        }

        
        /// <summary>
        /// Test DeleteSentenceV1IdruleId
        /// </summary>
        [Test]
        public void DeleteSentenceV1IdruleIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string idrule = null;
            //string id = null;
            //var response = instance.DeleteSentenceV1IdruleId(idrule, id);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GetSentenceV1InfoIdruleId
        /// </summary>
        [Test]
        public void GetSentenceV1InfoIdruleIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string idrule = null;
            //string id = null;
            //var response = instance.GetSentenceV1InfoIdruleId(idrule, id);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test PostSentenceV1AddIdrule
        /// </summary>
        [Test]
        public void PostSentenceV1AddIdruleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string idrule = null;
            //Model7 body = null;
            //var response = instance.PostSentenceV1AddIdrule(idrule, body);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test PutSentenceV1UpdateIdruleId
        /// </summary>
        [Test]
        public void PutSentenceV1UpdateIdruleIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string idrule = null;
            //string id = null;
            //Model15 body = null;
            //var response = instance.PutSentenceV1UpdateIdruleId(idrule, id, body);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
    }

}
